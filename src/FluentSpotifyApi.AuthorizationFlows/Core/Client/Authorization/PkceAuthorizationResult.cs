using System;

namespace FluentSpotifyApi.AuthorizationFlows.Core.Client.Authorization
{
    /// <summary>
    /// The PKCE authorization result.
    /// </summary>
    public class PkceAuthorizationResult
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PkceAuthorizationResult"/> class.
        /// </summary>
        /// <param name="authorizationCode">
        /// The authorization code returned from Spotify Account Service that, in combination with <paramref name="codeVerifier"/>,
        /// can be exchanged for access token.
        /// </param>
        /// <param name="codeVerifier">
        /// The key generated by the client that, in combination with <paramref name="authorizationCode"/>,
        /// can be exchanged for access token.
        /// </param>
        /// <param name="redirectUri">The redirect URI provided by <see cref="IAuthorizationRedirectUriProvider"/>.</param>
        public PkceAuthorizationResult(string authorizationCode, string codeVerifier, Uri redirectUri)
        {
            this.AuthorizationCode = authorizationCode;
            this.CodeVerifier = codeVerifier;
            this.RedirectUri = redirectUri;
        }

        /// <summary>
        /// Gets the authorization code returned from Spotify Account Service that, in combination with <see cref="CodeVerifier"/>,
        /// can be exchanged for access token.
        /// </summary>
        public string AuthorizationCode { get; }

        /// <summary>
        /// The key generated by the client that, in combination with <see cref="AuthorizationCode"/>,
        /// can be exchanged for access token.
        /// </summary>
        public string CodeVerifier { get; }

        /// <summary>
        /// Gets the redirect URI provided by <see cref="IAuthorizationRedirectUriProvider"/>.
        /// </summary>
        public Uri RedirectUri { get; }
    }
}
